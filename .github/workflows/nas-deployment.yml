name: NAS PostgreSQL Deployment
on:
  workflow_dispatch:
    inputs:
      nas_host:
        description: 'NAS Host IP'
        required: true
        default: '192.168.1.129'
      postgres_port:
        description: 'PostgreSQL Port'
        required: true
        default: '54322'

jobs:
  deploy-nas-postgres:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.NAS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ github.event.inputs.nas_host }} >> ~/.ssh/known_hosts
        
    - name: Deploy PostgreSQL to NAS
      run: |
        ssh admin@${{ github.event.inputs.nas_host }} << 'EOF'
        # Stop existing container
        docker stop claude-cold-storage 2>/dev/null || true
        docker rm claude-cold-storage 2>/dev/null || true
        
        # Create data directory
        mkdir -p /volume1/CLAUDE_BRAIN_HERE/postgres-data
        
        # Deploy PostgreSQL
        docker run -d --name claude-cold-storage --restart unless-stopped \
          -p ${{ github.event.inputs.postgres_port }}:5432 \
          -e POSTGRES_USER=claude_admin \
          -e POSTGRES_PASSWORD=ColdStorage21TB_20250625 \
          -e POSTGRES_DB=claude_cold_brain \
          -v /volume1/CLAUDE_BRAIN_HERE/postgres-data:/var/lib/postgresql/data \
          postgres:15
          
        # Wait for startup
        sleep 30
        
        # Initialize database
        docker exec claude-cold-storage psql -U claude_admin -d claude_cold_brain << 'SQLEOF'
        CREATE TABLE IF NOT EXISTS memories_cold (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
            content TEXT,
            category TEXT DEFAULT 'general',
            metadata JSONB DEFAULT '{}'::jsonb
        );
        
        INSERT INTO memories_cold (content, category) 
        VALUES ('GitHub Action Deployment - Triangle 100% Operational', 'system');
        
        SELECT COUNT(*) as total_records, 'DEPLOYMENT_SUCCESS' as status FROM memories_cold;
        SQLEOF
        
        echo "âœ… NAS PostgreSQL deployment complete via GitHub Action!"
        EOF
        
    - name: Verify Deployment
      run: |
        # Test connectivity
        nc -zv ${{ github.event.inputs.nas_host }} ${{ github.event.inputs.postgres_port }}
        
    - name: Notify Success
      run: |
        echo "ðŸŽ‰ Triangle Architecture is now 100% operational!"
        echo "ðŸ”º HOT/WARM/COLD tiers all functional"
        echo "ðŸ“Š 21TB NAS storage available"
